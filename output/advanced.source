SET datestyle = 'ISO';
SET client_min_messages = WARNING;
SET log_statement TO 'none';
SET max_parallel_workers_per_gather = 0;
CREATE EXTENSION parquet_fdw;
DROP ROLE IF EXISTS regress_parquet_fdw;
CREATE ROLE regress_parquet_fdw LOGIN SUPERUSER;
SET ROLE regress_parquet_fdw;
CREATE SERVER parquet_srv FOREIGN DATA WRAPPER parquet_fdw;
CREATE USER MAPPING FOR regress_parquet_fdw SERVER parquet_srv;
SET ROLE regress_parquet_fdw;
-- multiple sorting keys
CREATE FOREIGN TABLE example_multisort (
    one     INT8,
    two     INT8,
    three   TEXT,
    four    TIMESTAMP,
    five    DATE,
    six     BOOL)
SERVER parquet_srv
OPTIONS (filename '@abs_srcdir@/data/example1.parquet');
EXPLAIN (COSTS OFF) SELECT * FROM example_multisort ORDER BY one, five;
               QUERY PLAN                
-----------------------------------------
 Sort
   Sort Key: one, five
   ->  Foreign Scan on example_multisort
         Reader: Multifile
         Skipped row groups: none
(5 rows)

SELECT * FROM example_multisort ORDER BY one, five;
 one | two | three |        four         |    five    | six 
-----+-----+-------+---------------------+------------+-----
   1 |   1 | foo   | 2018-01-01 00:00:00 | 2018-01-01 | t
   2 |   2 | bar   | 2018-01-02 00:00:00 | 2018-01-02 | f
   3 |   3 | baz   | 2018-01-03 00:00:00 | 2018-01-03 | t
   4 |   4 | uno   | 2018-01-04 00:00:00 | 2018-01-04 | f
   5 |   5 | dos   | 2018-01-05 00:00:00 | 2018-01-05 | f
   6 |   6 | tres  | 2018-01-06 00:00:00 | 2018-01-06 | f
(6 rows)

-- self join
CREATE FOREIGN TABLE example1 (
    one     INT8,
    two     INT8,
    three   TEXT,
    four    TIMESTAMP,
    five    DATE,
    six     BOOL,
    seven   FLOAT8)
SERVER parquet_srv
OPTIONS (filename '@abs_srcdir@/data/example1.parquet');
SELECT 
    lhs.one l_one,
    lhs.three l_three,
    lhs.seven l_seven,
    rhs.one r_one,
    rhs.three r_three,
    rhs.seven r_seven
FROM example1 lhs JOIN example1 rhs
ON lhs.one > 3 * rhs.seven;
 l_one | l_three | l_seven | r_one | r_three | r_seven 
-------+---------+---------+-------+---------+---------
     2 | bar     |         |     1 | foo     |     0.5
     2 | bar     |         |     4 | uno     |     0.5
     3 | baz     |       1 |     1 | foo     |     0.5
     3 | baz     |       1 |     4 | uno     |     0.5
     4 | uno     |     0.5 |     1 | foo     |     0.5
     4 | uno     |     0.5 |     3 | baz     |       1
     4 | uno     |     0.5 |     4 | uno     |     0.5
     4 | uno     |     0.5 |     6 | tres    |       1
     5 | dos     |         |     1 | foo     |     0.5
     5 | dos     |         |     3 | baz     |       1
     5 | dos     |         |     4 | uno     |     0.5
     5 | dos     |         |     6 | tres    |       1
     6 | tres    |       1 |     1 | foo     |     0.5
     6 | tres    |       1 |     3 | baz     |       1
     6 | tres    |       1 |     4 | uno     |     0.5
     6 | tres    |       1 |     6 | tres    |       1
(16 rows)

EXPLAIN (COSTS OFF) SELECT 
    lhs.one l_one,
    lhs.three l_three,
    lhs.seven l_seven,
    rhs.one r_one,
    rhs.three r_three,
    rhs.seven r_seven
FROM example1 lhs JOIN example1 rhs
ON lhs.one > 3 * rhs.seven;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Nested Loop
   Join Filter: ((lhs.one)::double precision > ('3'::double precision * rhs.seven))
   ->  Foreign Scan on example1 lhs
         Reader: Multifile
         Skipped row groups: none
   ->  Materialize
         ->  Foreign Scan on example1 rhs
               Reader: Multifile
               Skipped row groups: none
(9 rows)

-- select with reordering
SELECT five FROM example1 WHERE three LIKE '__o' ORDER BY four DESC;
    five    
------------
 2018-01-04
 2018-01-01
(2 rows)

SELECT five FROM
    (SELECT * FROM example1 ORDER BY FOUR desc) intermediate
    WHERE three LIKE '__o';
    five    
------------
 2018-01-04
 2018-01-01
(2 rows)

-- window function
SELECT three, four, six, rank() OVER (PARTITION BY six ORDER BY four DESC) FROM example1;
 three |        four         | six | rank 
-------+---------------------+-----+------
 tres  | 2018-01-06 00:00:00 | f   |    1
 dos   | 2018-01-05 00:00:00 | f   |    2
 uno   | 2018-01-04 00:00:00 | f   |    3
 bar   | 2018-01-02 00:00:00 | f   |    4
 baz   | 2018-01-03 00:00:00 | t   |    1
 foo   | 2018-01-01 00:00:00 | t   |    2
(6 rows)

-- Rescan
SET enable_hashjoin = off;
SET enable_mergejoin = off;
SET enable_material = off;
explain select * from example1 a, example1 b where a.one = b.one;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Nested Loop  (cost=0.00..22510.00 rows=5000 width=138)
   Join Filter: (a.one = b.one)
   ->  Foreign Scan on example1 a  (cost=0.00..10.00 rows=1000 width=69)
         Reader: Multifile
         Skipped row groups: none
   ->  Foreign Scan on example1 b  (cost=0.00..10.00 rows=1000 width=69)
         Reader: Multifile
         Skipped row groups: none
(8 rows)

select * from example1 a, example1 b where a.one = b.one;
 one | two | three |        four         |    five    | six | seven | one | two | three |        four         |    five    | six | seven 
-----+-----+-------+---------------------+------------+-----+-------+-----+-----+-------+---------------------+------------+-----+-------
   1 |   1 | foo   | 2018-01-01 00:00:00 | 2018-01-01 | t   |   0.5 |   1 |   1 | foo   | 2018-01-01 00:00:00 | 2018-01-01 | t   |   0.5
   2 |   2 | bar   | 2018-01-02 00:00:00 | 2018-01-02 | f   |       |   2 |   2 | bar   | 2018-01-02 00:00:00 | 2018-01-02 | f   |      
   3 |   3 | baz   | 2018-01-03 00:00:00 | 2018-01-03 | t   |     1 |   3 |   3 | baz   | 2018-01-03 00:00:00 | 2018-01-03 | t   |     1
   4 |   4 | uno   | 2018-01-04 00:00:00 | 2018-01-04 | f   |   0.5 |   4 |   4 | uno   | 2018-01-04 00:00:00 | 2018-01-04 | f   |   0.5
   5 |   5 | dos   | 2018-01-05 00:00:00 | 2018-01-05 | f   |       |   5 |   5 | dos   | 2018-01-05 00:00:00 | 2018-01-05 | f   |      
   6 |   6 | tres  | 2018-01-06 00:00:00 | 2018-01-06 | f   |     1 |   6 |   6 | tres  | 2018-01-06 00:00:00 | 2018-01-06 | f   |     1
(6 rows)

DROP EXTENSION parquet_fdw CASCADE;
